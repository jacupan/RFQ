@{
    ViewBag.Title = "Maintenance Tool";
}
<link href="@Url.Content("~/Content/font-awesome.min.css")" rel="stylesheet" type="text/css" />
<style type="text/css">
    .k-edit-form-container
    {
        width: 100%;
    }
    
    .k-window div.k-window-content
    {
        overflow: hidden;
    }
    
    #gridRfqBuyersLookup tr.k-alt {
        background: transparent ;
    }  
    
    #tabBuyersLookUp { /* tabstrip element */
        height: auto;
        width: auto;
        @*position: fixed; *@       
    }    
   
</style>

<input type="hidden" value='@ViewData["userDepartment"]' id="dept" />
<div id="modalWindow">
    <br />
    <p>
        Are you sure you want to delete this record?</p>
    <hr />
    <div class="btn-group" style="margin-left: 100px">
        <button id="yes" class="k-button">
            Yes</button>
        <button id="no" class="k-button">
            No</button>
    </div>
</div>


<div class="container-fluid">
    <div style="margin-top: -10px">
        <div class="container-fluid">
            <div class="col-md-8 col-md-offset-2">
                <h1 style="font-family: Franklin Gothic Book; text-align: center; font-weight: bold;">
                    Maintenance Tool</h1>
            </div>
        </div>
        <div style="margin-top: 100px">
           @* <div class="container-fluid" >*@
                
                 @(Html.Kendo().TabStrip()
                    .Name("tabBuyersLookUp")
                    .Animation(false)                    
                    .Items(items =>
                    {
                        items.Add().Text("Buyer's Lookup")
                             .Encoded(false)
                             .Selected(true)
                             .Content("<div class='container-fluid'> " +
                                 Html.Kendo().Grid<RFQWebApp.Models.BuyersLookup>()
                                            .Name("gridRfqBuyersLookup")                                            
                                            .AutoBind(true)
                                            .HtmlAttributes(new { style = "height: 500px;" })                                           
                                            .ToolBar(toolbar =>
                                            {
                                                toolbar.Create();
                                            })
                                             .ToolBar(excel =>
                                             {
                                                 excel.Excel();

                                             })
                                            .Excel(exc => exc.AllPages(true))
                                            .Editable(editable => editable.Mode(GridEditMode.PopUp)
                                                .TemplateName("RfqBuyersLookupEditor").Window(window => window.Name("editGridWindow")
                                                //.Width(490)
                                                ).DisplayDeleteConfirmation(false))
                                            .Columns(col =>
                                            {
                                                col.Bound(a => a.Guid)
                                                    .Visible(false);
                                                col.Bound(a => a.Category)                          
                                                    .HeaderHtmlAttributes(new { style = "text-align: left" })
                                                    .HtmlAttributes(new { style = "text-align: left" })
                                                    ;
                                                col.ForeignKey(a => a.AssignedBuyer,
                                                       (System.Collections.IEnumerable)ViewData["buyers"],
                                                       "Value",
                                                       "Text")
                                                   .Width(490)
                                                   .HeaderHtmlAttributes(new { style = "text-align: left" })
                                                   .HtmlAttributes(new { style = "text-align: left" })
                                                   ;                                                
                                                //col.Bound(a => a.AssignedBuyer)                           
                                                //    .HeaderHtmlAttributes(new { style = "text-align: left" })
                                                //    .HtmlAttributes(new { style = "text-align: left" })
                                                //    ;                        
                                                col.Bound(a => a.Comments)                           
                                                    .HeaderHtmlAttributes(new { style = "text-align: left" })
                                                    .HtmlAttributes(new { style = "text-align: left" })
                                                    ;
                                                col.Bound(a => a.Remarks)                          
                                                    .HeaderHtmlAttributes(new { style = "text-align: left" })
                                                    .HtmlAttributes(new { style = "text-align: left" })
                                                    ;                      
                                                col.Command(commands =>
                                                {
                                                    commands.Edit().HtmlAttributes(new { id = "editBtn" });                                            // The "edit" command will edit and update data items                          
                                                    commands.Custom(" Delete").Click("openWindow").HtmlAttributes(new { id = "delBtn" });
                                                })                           
                                                    .HeaderHtmlAttributes(new { style = "text-align: center" })
                                                    .HtmlAttributes(new { style = "text-align: center" })
                                                    .Title("Commands").Width(200)
                                                    ;

                                            })
                                            .Filterable()
                                            .Pageable(pager => pager
                                            .PageSizes(new[] { 20, 40, 60, 80, 100 })                                // Default page sizes are 5, 10 and 20
                                            .Refresh(true).Messages(
                                                messages => messages.Refresh("Click to refresh"))
                                            )
                                            .Sortable()
                                            .Scrollable()
                                            .Resizable(resizable => resizable.Columns(true))
                                            .DataSource(ds =>
                                            {
                                                ds.Ajax()
                                                    .ServerOperation(false)
                                                    .Events(events => events.Error("onGridError"))
                                                    .Model(model =>
                                                    {
                                                        model.Id(a => a.Guid);

                                                    })
                                                    .Read(read => read.Action("RfqBuyersLookup_Read", "Grid"))
                                                    .Create(create => create.Action("RfqBuyersLookup_Create", "Grid"))
                                                    .Update(update => update.Action("RfqBuyersLookup_Update", "Grid"))
                                                    .Destroy(destroy => destroy.Action("RfqBuyersLookup_Destroy", "Grid"));
                                            })
                                            .Events(e =>
                                            {
                                                e.Edit("onGridEdit");
                                                e.DataBound("onRowBound").Cancel("onCancel");                        
                                            }).ToHtmlString() +                                    
                                 "<div>"); 
                                 
                    }) 
                      
                )
          @*  </div>*@
        </div>
    </div>
</div> 


<script type="text/javascript">
    var wnd;
    $(document).ready(function () {

        wnd = $("#modalWindow").kendoWindow({
            title: "Delete Confirmation",
            modal: true,
            visible: false,
            resizable: false,
            width: 300
        }).data("kendoWindow");
        var dept = $("#dept").val();

        if (dept != "Purchasing (550)" && dept != "Information System (582)") {
            window.location.href = '/Home/AccessDenied/';
        }      

    });

    function openWindow(e) {
        e.preventDefault();

        var grid = this;
        var row = $(e.currentTarget).closest("tr");
        wnd.title("Delete Record");
        wnd.content("<br /><p>Are you sure you want to delete this record?</p><hr /><div class='btn-group' style='margin-left: 100px'><button id='yes' class='k-button'>Yes</button><button id='no'class='k-button'>No</button>");
        wnd.center().open();

        $("#yes").click(function () {
            grid.removeRow(row);
            //            grid.saveChanges();
            wnd.close();
        });

        $("#no").click(function () {
            wnd.close();
        });
    }

    function onGridEdit(e) {

        $('.k-window-title').text((e.model.isNew() ? "New" : "Edit") + " Record");
        e.container.find('.k-grid-update,.k-grid-cancel').css('display', 'inline-block');
        $('.k-grid-update').text((e.model.isNew() ? "Add" : "Update") + " Record");
    }

    function onGridError(e) {
        if (e.errors) {
            var message = "There are some errors:\n";
            // Create a message containing all errors.
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            // Display the message
            alert(message);
            // Cancel the changes
            var grid = $("#gridRfqBuyersLookup").data("kendoGrid");
            grid.cancelChanges();
        }
    }

    function onRowBound(e) {             

        e.sender.tbody.find(".k-grid-Delete").each(function (idx, element) {
            $(element).removeClass("fa fa-trash").find("span").addClass("fa fa-trash");
        });
    }

    function onCancel(e) {

        setTimeout(function () {           

            e.sender.tbody.find(".k-grid-Delete").each(function (idx, element) {
                $(element).removeClass("fa fa-trash").find("span").addClass("fa fa-trash");
            });
        });


    }

</script>
